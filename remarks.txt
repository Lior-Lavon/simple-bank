project: https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE

// create DB schema 
https://dbdiagram.io

// TablePlus to manage postgres

// Database migration library
https://github.com/golang-migrate/migrate
> brew install golang-migrate
> migrate -version // v4.15.2
> create ./db/migration folders
// Initialise the db schema 
> migrate create -ext sql -dir db/migration -seq init_schema [migration_name]
// -seq = sequential version number
// init_schema = [migration_name]

// create db from inside the shell 
> createdb --username=root --owner=root simple_bank
> dropdb simple_bank

// manage DB from outside the shell using docker command
> docker exec -it postgres12 createdb --username=root --owner=root simple_bank
> docker exec -it postgres12 dropdb simple_bank

// run migration from project folder
> migrate -path ../db/migration -database "postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose up
> migrate -path ../db/migration -database "postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose down

// Auto generating database CRUD code using SQLC
https://github.com/kyleconroy/sqlc
// Installation
> brew install sqlc
> sqlc init

// Creating tests for CRUD DB functinality
// create main_test.go to hold all the db connection and query
// create account_test.go for testing functionality
// Install a PG drive from https://github.com/lib/pq using "go get github.com/lib/pq"

// Use Testify package for checking the test results
// https://github.com/stretchr/testify
// go get github.com/stretchr/testify
// import "github.com/stretchr/testify/require"

// CI using "Github Action" with Go + postgres
// to auto build, test and deploy
// Define a Workflow built from several Jobs
// The Workflow can be triggered by one of 3 (Change to repository on Github, Schedule , or button click)
// Creating a Workflow in .github/workflows/ci.yml file on the repository main folder
// Jobs are defined by a Runner (server that listen for available jobs)
// The Runner will execute the job and push the report to a log hosted by Github
// A Job is a set of steps that will be executed inside a Runner
// Steps are actions inside a Job and run serially 
// A Step can contain several actions
// Action is single command

// Web Server : Gin

// Viper
// Read config from file or ENV variables
// Repo : https://github.com/spf13/viper
// Install : go get github.com/spf13/viper
// File - config for local developement and testing
// Ev. variables - config for docker production
// Usage : DB configuration in main_test.go and main.go files 
// Create a file in root 'app.env' to store config values for developement
// copy the db variables from main.go
// configure Viper to load the app.env file -> create a file config.go in ./utill
// Init the LoadConfig in main.go
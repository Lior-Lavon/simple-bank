project: https://www.youtube.com/playlist?list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE

// create DB schema 
https://dbdiagram.io

// TablePlus to manage postgres

// Database migration library
https://github.com/golang-migrate/migrate
> brew install golang-migrate
> migrate -version // v4.15.2
> create ./db/migration folders
// Initialise the db schema 
> migrate create -ext sql -dir db/migration -seq init_schema [migration_name]
// -seq = sequential version number
// init_schema = [migration_name]

// create db from inside the shell 
> createdb --username=root --owner=root simple_bank
> dropdb simple_bank

// manage DB from outside the shell using docker command
> docker exec -it postgres12 createdb --username=root --owner=root simple_bank
> docker exec -it postgres12 dropdb simple_bank

// run migration from project folder
> migrate -path ../db/migration -database "postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose up
> migrate -path ../db/migration -database "postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose down

// Auto generating database CRUD code using SQLC
https://github.com/kyleconroy/sqlc
// Installation
> brew install sqlc
> sqlc init

// Creating tests for CRUD DB functinality
// create main_test.go to hold all the db connection and query
// create account_test.go for testing functionality
// Install a PG drive from https://github.com/lib/pq using "go get github.com/lib/pq"

// Use Testify package for checking the test results
// https://github.com/stretchr/testify
// go get github.com/stretchr/testify
// import "github.com/stretchr/testify/require"

// CI using "Github Action" with Go + postgres
// to auto build, test and deploy
// Define a Workflow built from several Jobs
// The Workflow can be triggered by one of 3 (Change to repository on Github, Schedule , or button click)
// Creating a Workflow in .github/workflows/ci.yml file on the repository main folder
// Jobs are defined by a Runner (server that listen for available jobs)
// The Runner will execute the job and push the report to a log hosted by Github
// A Job is a set of steps that will be executed inside a Runner
// Steps are actions inside a Job and run serially 
// A Step can contain several actions
// Action is single command

// Web Server : Gin

// Viper
// Read config from file or ENV variables
// Repo : https://github.com/spf13/viper
// Install : go get github.com/spf13/viper
// File - config for local developement and testing
// Ev. variables - config for docker production
// Usage : DB configuration in main_test.go and main.go files 
// Create a file in root 'app.env' to store config values for developement
// copy the db variables from main.go
// configure Viper to load the app.env file -> create a file config.go in ./utill
// Init the LoadConfig in main.go

// Http testing using Mock-DB
// https://github.com/golang/mock
// Install GoMock : go get github.com/golang/mock/mockgen@v1.6.0
>  ls -l ~/go/bin
>  which mockgen -> result with 'mockgen not found' becouse 
// create  new folder in db/mock
// check 'mockgen help' and choose 'Reflect mode'
// mockgen [package-name] [path-to-generated-output] [path-to-store-interface] [interface-name] 
> mockgen -package mockdb -destination db/mock/store.go github.com/liorlavon/simplebank/db/sqlc Store 
// find the generated file in db/mock/store.go
Now we can start writing tests for the API
// create a account_test.go in the api folder

Custom Validator: (for Currency options)
vaidate input Params
create 'validator.go file 
import "github.com/go-playground/validator/v10"
var validCurrency validator.Func 
create a new file in util package called 'currency.go' to validate one currency filed with a list of possible options
> Next: register the custom validator with Gin in server.go file
	// get currect validator engine(interface) and conver it to *validator.Validate pointer
	v, ok := binding.Validator.Engine().(*validator.Validate)
	if ok {
		// register new validator
		v.RegisterValidation("currency", validCurrency)
	}
> Next: change the binding validation input for currenct
in account.go change oneof=USD EUR with currency
    //Currency string `json:"currency" binding:"required,oneof=USD EUR"`
    Currency string `json:"currency" binding:"required,currency"`






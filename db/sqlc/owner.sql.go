// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: owner.sql

package db

import (
	"context"
)

const createOwner = `-- name: CreateOwner :one
INSERT INTO owners (
  firstname, 
  lastname, 
  email
) VALUES (
  $1, $2, $3
) RETURNING id, firstname, lastname, email, created_at
`

type CreateOwnerParams struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (Owner, error) {
	row := q.db.QueryRowContext(ctx, createOwner, arg.Firstname, arg.Lastname, arg.Email)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOwner = `-- name: DeleteOwner :exec
DELETE FROM owners
WHERE id = $1
`

func (q *Queries) DeleteOwner(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOwner, id)
	return err
}

const getOwner = `-- name: GetOwner :one
SELECT id, firstname, lastname, email, created_at FROM owners
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOwner(ctx context.Context, id int64) (Owner, error) {
	row := q.db.QueryRowContext(ctx, getOwner, id)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listOwners = `-- name: ListOwners :many
SELECT id, firstname, lastname, email, created_at FROM owners
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOwnersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOwners(ctx context.Context, arg ListOwnersParams) ([]Owner, error) {
	rows, err := q.db.QueryContext(ctx, listOwners, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(
			&i.ID,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOwner = `-- name: UpdateOwner :one
UPDATE owners
  set 
  firstname = $2, 
  lastname = $3, 
  email = $4
WHERE id = $1
RETURNING id, firstname, lastname, email, created_at
`

type UpdateOwnerParams struct {
	ID        int64  `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Email     string `json:"email"`
}

func (q *Queries) UpdateOwner(ctx context.Context, arg UpdateOwnerParams) (Owner, error) {
	row := q.db.QueryRowContext(ctx, updateOwner,
		arg.ID,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
	)
	var i Owner
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

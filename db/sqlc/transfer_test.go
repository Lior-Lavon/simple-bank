package db

import (
	"context"
	"testing"

	"github.com/liorlavon/simplebank/util"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func createRandomAccounts(t *testing.T) (a1 Account, a2 Account) {

	// create owner1
	argOwner1 := CreateOwnerParams{
		Firstname: util.RandomOwner(),
		Lastname:  util.RandomOwner(),
		Email:     util.RandEmail(),
	}
	o1, err := testQueriers.CreateOwner(context.Background(), argOwner1)
	assert.NoError(t, err)
	// create account1
	argAccount1 := CreateAccountParams{
		OwnerID:  o1.ID,
		Balance:  100,
		Currency: "USD",
	}
	a1, err = testQueriers.CreateAccount(context.Background(), argAccount1)
	assert.NoError(t, err)

	// create owner2
	argOwner2 := CreateOwnerParams{
		Firstname: util.RandomOwner(),
		Lastname:  util.RandomOwner(),
		Email:     util.RandEmail(),
	}
	o2, err := testQueriers.CreateOwner(context.Background(), argOwner2)
	assert.NoError(t, err)
	// create account2
	argAccount2 := CreateAccountParams{
		OwnerID:  o2.ID,
		Balance:  100,
		Currency: "USD",
	}
	a2, err = testQueriers.CreateAccount(context.Background(), argAccount2)
	assert.NoError(t, err)

	return a1, a2

}

func deleteRandomAccounts(t *testing.T, a1 Account, a2 Account) {

	testQueriers.DeleteAccount(context.Background(), a1.ID)
	testQueriers.DeleteOwner(context.Background(), a1.OwnerID)

	testQueriers.DeleteAccount(context.Background(), a2.ID)
	testQueriers.DeleteOwner(context.Background(), a2.OwnerID)
}

func createRandomTransfer(t *testing.T, a1 Account, a2 Account) Transfer {
	arg := CreateTransferParams{
		FromAccountID: a1.ID,
		ToAccountID:   a2.ID,
		Amount:        util.RandomMoney(),
	}

	tr, err := testQueriers.CreateTransfer(context.Background(), arg)
	assert.NoError(t, err)
	assert.Equal(t, a1.ID, tr.FromAccountID)
	assert.Equal(t, a2.ID, tr.ToAccountID)
	assert.Equal(t, arg.Amount, tr.Amount)

	// check that ID is generated by PG
	require.NotZero(t, tr.ID)
	require.NotZero(t, tr.CreatedAt)

	return tr
}

func deleteRandomTransfer(t *testing.T, id int64) {
	err := testQueriers.DeleteTransfer(context.Background(), id)
	assert.NoError(t, err)
}

func TestCreateTransfer(t *testing.T) {
	a1, a2 := createRandomAccounts(t)

	tr := createRandomTransfer(t, a1, a2)

	deleteRandomTransfer(t, tr.ID)
	deleteRandomAccounts(t, a1, a2)
}

func TestGetTransfer(t *testing.T) {

	a1, a2 := createRandomAccounts(t)

	tr1 := createRandomTransfer(t, a1, a2)

	tr2, err := testQueriers.GetTransfer(context.Background(), tr1.ID)
	assert.NoError(t, err)
	assert.NotEmpty(t, tr2)

	assert.Equal(t, tr1.FromAccountID, tr2.FromAccountID)
	assert.Equal(t, tr1.FromAccountID, tr2.FromAccountID)
	assert.Equal(t, tr1.Amount, tr2.Amount)

	// check that ID is generated by PG
	require.NotZero(t, tr2.ID)
	require.NotZero(t, tr2.CreatedAt)

	deleteRandomTransfer(t, tr1.ID)
	deleteRandomAccounts(t, a1, a2)

}

func TestListTransfer(t *testing.T) {

	a1, a2 := createRandomAccounts(t)

	tr1 := createRandomTransfer(t, a1, a2)
	assert.NotEmpty(t, tr1)
	tr2 := createRandomTransfer(t, a1, a2)
	assert.NotEmpty(t, tr2)
	tr3 := createRandomTransfer(t, a1, a2)
	assert.NotEmpty(t, tr3)

	//----------------------
	arg1 := ListTransfersFromParams{
		FromAccountID: a1.ID,
		Limit:         5,
		Offset:        0,
	}
	trsFrom, err := testQueriers.ListTransfersFrom(context.Background(), arg1)
	assert.NoError(t, err)
	assert.Len(t, trsFrom, 3)

	for _, tmp := range trsFrom {
		assert.NotEmpty(t, tmp)
	}

	//----------------------
	arg2 := ListTransfersToParams{
		ToAccountID: a2.ID,
		Limit:       5,
		Offset:      0,
	}
	trsTo, err := testQueriers.ListTransfersTo(context.Background(), arg2)
	assert.NoError(t, err)
	assert.Len(t, trsTo, 3)

	for _, tmp := range trsTo {
		assert.NotEmpty(t, tmp)
	}

	deleteRandomTransfer(t, tr1.ID)
	deleteRandomTransfer(t, tr2.ID)
	deleteRandomTransfer(t, tr3.ID)
	deleteRandomAccounts(t, a1, a2)
}

func TestUpdateTransfer(t *testing.T) {

	a1, a2 := createRandomAccounts(t)
	tr1 := createRandomTransfer(t, a1, a2)

	arg := UpdateTransferParams{
		ID:     tr1.ID,
		Amount: util.RandomMoney(),
	}
	tr2, err := testQueriers.UpdateTransfer(context.Background(), arg)
	assert.NoError(t, err)
	assert.NotEmpty(t, tr2)

	assert.Equal(t, arg.Amount, tr2.Amount)

	deleteRandomTransfer(t, tr1.ID)
	deleteRandomAccounts(t, a1, a2)

}

func TestDeleteTransfer(t *testing.T) {
	a1, a2 := createRandomAccounts(t)
	tr1 := createRandomTransfer(t, a1, a2)

	err := testQueriers.DeleteTransfer(context.Background(), tr1.ID)
	assert.NoError(t, err)

	_, err = testQueriers.GetTransfer(context.Background(), tr1.ID)
	assert.Error(t, err)

	deleteRandomAccounts(t, a1, a2)
}

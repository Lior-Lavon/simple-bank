# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: ci-test

#define the events that can trigger this workflow
on: 
  push:
    branches: [ "main" ] # Push to main branch
  pull_request:
    branches: [ "main" ] # PR accepted to main branch

# define the jpbs
jobs:
  
  test: # job 1
    name: Test
    runs-on: ubuntu-latest
    
    # Service containers to run with `container-job`
    services:           # specifiy a list of external services
      postgres:
        image: postgres:12                 # Docker Hub image
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: simple_bank
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432


    # define the steps
    steps:

      - name: Set up Go 1.x       # install go into the runner
        uses: actions/setup-go@v2
        with:                     # specifiy additional params, ex: use specific version of Go
          go-version: ^1.20
        id: go                    # Allias used to identify the step with other steps

      - name: Check out the code into the Go module directory
        uses: actions/checkout@v2 # check code from the repo. to the runner
      
      - name: Install Golang-Migrate
        run: | 
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.2/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/migrate
          which migrate
          
      - name: Run migration
        working-directory: ./project
        run: make migrateup
      - name: Test
        working-directory: ./project
        run: make test